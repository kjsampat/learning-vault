# Vue JS 3 Tutorial for Beginners

https://www.youtube.com/playlist?list=PL4cUxeGkcC9hYYGbV60Vq3IXYNfDk8At1

## Introduction

### What is Vue? 
- Javascript Front End Framework for creating dynamic data driven websites and stand alone widgets

### Vue widgets
- Vue components are self contained and can be dropped in where needed. 
- Example: Search Bar

### SPA
- Single Page Applications
- Entire site is encloded into a Vue components
- Browser requests a single webpage from server and a bare bones empty html site is returned. 
- The browser then loads Vue components such as nav bar, side bar etc. Includes routing from page to page. 
- Much faster and smoother website experience.

### Whats new in Vue 3 
- Composition API - gives us a new setup() function
- Multiple Root Elements
- Teleport component - render content from one component in a different place in the DOM. Such as a modal loaded from the footer but triggered in the content
- Suspense component
- multiple v-models for custom components

## Basics Part 1
- Vue Js Docs are super helpful https://vuejs.org/guide/introduction.html 

### Setup
- Add Vue using CDN 
- `<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>`

### Create a Vue Application
```
const app = Vue.createApp()
app.mount('#app')
```
- Creates a new vue app and mounts it to a div with the id `#app`
- `<div id="app"></div>`
- Controls anything inside `#app`
- Can't control anything outside `#app`

**Add a Template**
- Create a new template that displays inside `#app`

```
const app = Vue.createApp({
    // data, functions
    template: '<h2> </>'
})
app.mount('#app')
```

**Create a template in HTML instead of JS**
```
<div id="app">
    <h2>I am the template now<h2>
</div>
```

### Data and Templates
**Add a variable inside the template**
```
const app = Vue.createApp({
    data() {
        return {
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    }
})
app.mount('#app')
```
```
<div id="app">
    <p>{{ title }} - {{ author }} - {{ age }}<p>
</div>
```
### Click Events
**Directives**
```
v-on:click=""

<div id="app">
    <p>{{ title }} - {{ author }} - {{ age }}<p>
    <button v-on:click="age++">Increase Age</button>
    <button v-on:click="age--">Decrease Age</button>
</div>

```
Click functions are very common in Vue so there is a shortcut as well. 
```
shortcut: @click=""
<div id="app">
    <p>{{ title }} - {{ author }} - {{ age }}<p>
    <button v-on:click="age++">Increase Age</button>
    <button v-on:click="age--">Decrease Age</button>
    <div @click="title = 'something else'">Change book title</div>
</div>
```

Click events can also be done directly in the component
```
<div id="app">
    <p>{{ title }} - {{ author }} - {{ age }}<p>
    <button v-on:click="age++">Increase Age</button>
    <button v-on:click="age--">Decrease Age</button>
    <div @click="changeTitle">Change book title</div>
</div>
```
```
const app = Vue.createApp({
    data() {
        return {
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        changeTitle() {
            this.title = 'Words of Radiance'
        }
    }
})
app.mount('#app')
```
Must use `this` keyword when accessing variables. 

Can also pass in arguments

```
<div id="app">
    <p>{{ title }} - {{ author }} - {{ age }}<p>
    <button v-on:click="age++">Increase Age</button>
    <button v-on:click="age--">Decrease Age</button>
    <div @click="changeTitle('Oathbringer)">Change book title</div>
</div>
```
```
const app = Vue.createApp({
    data() {
        return {
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        changeTitle(title) {
            this.title = title // outputs "Oathbringer" that was passed in via the changeTitle function in the template
        }
    }
})
app.mount('#app')
```

### Conditional Rendering

Use directive `v-if`
- Setting v-if to true will show the component. Setting this to false would hide it. 
- A better way to do this is to use a variable in the template. For example `showBooks`

```
<div id="app">
    <div v-if="showBooks">
        <p>{{ title }} - {{ author }} - {{ age }}<p>
    </div>
</div>
```
```
const app = Vue.createApp({
    data() {
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        
    }
})
app.mount('#app')
```

Giving the use ability to toggle show/hide using button
```
<div id="app">
    <div v-if="showBooks">
        <p>{{ title }} - {{ author }} - {{ age }}<p>
    </div>
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books<span>
        <span v-if="!showBooks">Show Books<span>
    </button>
</div>
```
```
const app = Vue.createApp({
    data() {
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        toggleShowBooks() {
            this.showBooks = !this.showBooks // sets to the opposite value. 
        }
    }
})
app.mount('#app')
```

Directive `v-else`

```
<div id="app">
    <div v-if="showBooks">
        <p>{{ title }} - {{ author }} - {{ age }}<p>
    </div>
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books<span>
        <span v-else>Show Books<span>
    </button>
</div>
```

Directive `v-show`
- uses CSS to hide content
- better performance when hiding and showing content frequently.

```
<div id="app">
    <div v-if="showBooks">
        <p>{{ title }} - {{ author }} - {{ age }}<p>
    </div>
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books<span>
        <span v-else>Show Books<span>
    </button>

    <div v-show="showBooks">currently showing books</div>
</div>
```

## Vue Basics Part 2

### Other mouse events
**4 types of mouse events**
- `v-on:mouseover` or `@mouseover`
- `v-on:mouseleave` or `@mouseleave`
- `@dblclick`
- 

```
<div id="app">
    <div v-if="showBooks">
        <p>{{ title }} - {{ author }} - {{ age }}<p>
    </div>
    <button @click="toggleShowBooks">
        <span v-if="showBooks">Hide Books<span>
        <span v-else>Show Books<span>
    </button>

    <!-- Mouse Events -->
    <div class="box" @mouseover="handleEvent" >mouseover (enter)<div>
    <div class="box" @mouseleave="handleEvent" >mouseleave<div>
    <div class="box" @dblclick="handleEvent" >double click<div>
    <div class="box"><div>
</div>
```
```
const app = Vue.createApp({
    data() {
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        toggleShowBooks() {
            this.showBooks = !this.showBooks // sets to the opposite value. 
        }
        handleEvent() {
            console.log('event') // outputs the word event if triggered
        }
    }
})
app.mount('#app')
```
**Event Object**
Events automatically create an optional event object. This object is the automtically created as the first parameter. 
- shows event object in the console
- e.type shows event object properties
- there is also a special variable created that can call the event object `$event`

```
const app = Vue.createApp({
    data() {
        return {
            showBooks: true,
            title: 'The Final Empire',
            author: 'Brandon Sanderson',
            age: 45
        }
    },
    methods: {
        toggleShowBooks() {
            this.showBooks = !this.showBooks // sets to the opposite value. 
        }
        handleEvent(e) {
            console.log(e, e.type)
        }
    }
})
app.mount('#app')
```
Passing custom arguments through the mouse event. 
- passing in custom arguments will take the first position and the event object will show undefined. 
```
<div class="box" @mouseover="handleEvent(5)" >mouseover (enter)<div>
// results in the console logging "5 undefined" since the event object is no longer first. 
```
Force the event object inside
```
<div class="box" @mouseover="handleEvent($event, 5)" >mouseover (enter)<div>
// results in the console logging the event object then 5
```

### Outputting Lists 

### Attribute Binding

### Dynamic Classes

### Challenge: Toggling Favs

### Computed Properties

